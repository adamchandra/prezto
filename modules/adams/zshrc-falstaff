#!/bin/zsh

# zstyle :omz:plugins:ssh-agent agent-forwarding on
# keychain -q ~/.ssh/id_dsa ~/.ssh/id_rsa;

export TMUX="/var/lib/gems/1.9.1/gems/tmuxinator-0.5.0"
export PYTHON=/home/saunders/projects/the-toolshed/pythons/python2.7.3
export SCALA_HOME="/home/saunders/projects/the-outhouse/java/scala-2.9.2"
export SCALAGEN_HOME="/home/saunders/projects/the-livingroom/app/scalagen/scalagen"
export SCALATE_HOME="/home/saunders/projects/the-livingroom/app/scalate-1.5.3"
export TYPESAFE_STACK="/home/saunders/projects/the-toolshed/typesafe-stack"
export JAVA_HOME="/home/saunders/projects/the-toolshed/javas/java7"
export JAVA_HOME_7="/home/saunders/projects/the-toolshed/javas/java7"
export MONGODB_HOME="/home/saunders/projects/the-toolshed/mongodb/mongodb"
export ECLIPSE_HOME="/home/saunders/projects/the-toolshed/eclipses/eclipse-3.7"
export IDEA_HOME="/home/saunders/projects/the-toolshed/intellij-ideas/idea"
export TOOLSHED="/home/saunders/projects/the-toolshed"
export JPROFILER_HOME="$TOOLSHED/jprofiler7"
export JSWAT_HOME="/home/saunders/projects/the-toolshed/jswat/jswat-2013.1"


[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator

prepend() { [ -d "$2" ] && eval $1=\"$2\$\{$1:+':'\$$1\}\" && export $1 ; }


prepend PATH $JAVA_HOME/bin              
prepend PATH $PYTHON/bin                 
prepend PATH $MONGODB_HOME/bin
prepend PATH $JPROFILER_HOME/bin
prepend PATH $IDEA_HOME/bin
prepend PATH $JSWAT_HOME/bin
prepend PATH "/home/saunders/.cabal/bin"
prepend PATH "/home/saunders/nodejs-install/bin"
prepend PATH $TMUX/bin
prepend PATH $HOME/bin
prepend PATH $HOME/.cabal/bin
prepend PATH $HOME/nodejs-install/bin
prepend PATH "."
path=($^path(N))

export NODE_PATH=$HOME/nodejs-install/lib/node_modules

export LD_LIBRARY_PATH="$PYTHON/lib:$LD_LIBRARY_PATH"

### google code csearch/cindex
export CSEARCH_HOME="/home/saunders/projects/the-plumbing/home-directory-resources/cindexing"
# place to store mutable index files
export CSEARCH_VAR="/home/saunders/projects/the-kitchen/var/run/cindex"

export CSEARCHINDEX="$CSEARCH_VAR/.cindex-data"
export CSEARCH_INDEXABLES="$CSEARCH_HOME/.cindex-roots"

source /usr/share/autojump/autojump.zsh

# Define a new ZLE widget to apply a regexp
# to all but command (asyd@asyd.net)

autoload -U read-from-minibuffer

# Define a new function which apply a regexp
# to all words but the first one (the command)
regex-edit () {
   # REPLY will be filled by read-from-minibuffer
   local REPLY words
   words=(${=BUFFER})
   read-from-minibuffer "Regexp:"
   if [ -n $REPLY ]; then
      # Yes I know, it's a bit ugly, but how apply a regex
      # in pure zsh ?
      BUFFER="$words[1] $(echo $words[2,${#words}] | sed ${REPLY})"
   fi
}

# Create a new ZLE widget
zle -N regex-edit

# And finally bind it
bindkey "^[e" regex-edit

emacsd() {
    # open emacs and detach it from the shell
    ps -C "emacs" >/dev/null || ps -C "emacs23" >/dev/null && echo "emacs running..." && return 1
    echo 'please start emacs --daemon'
}


visit() {
    ( emacsd $1 2>&1 >/dev/null ) || ( emacsclient -n $1 )
}


# function precmd {
#     local TERMWIDTH
#     (( TERMWIDTH = ${COLUMNS} - 1 ))
# 
#     ###
#     # Truncate the path if it's too long.
#     
#     PR_FILLBAR=""
#     PR_PWDLEN=""
#     
#     local promptsize=${#${(%):---(%n@%m:%l)---()--}}
#     local pwdsize=${#${(%):-%~}}
#     
#     if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
# 	      ((PR_PWDLEN=$TERMWIDTH - $promptsize))
#     else
# 	      PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
#     fi
# 
#     ###
#     # Get APM info.
# 
#     if which ibam > /dev/null; then
# 	      PR_APM_RESULT=`ibam --percentbattery`
#     elif which apm > /dev/null; then
# 	      PR_APM_RESULT=`apm`
#     fi
# }
# 
# 
# setopt extended_glob
# preexec () {
#     if [[ "$TERM" == "screen" ]]; then
# 	      local CMD=${1[(wr)^(*=*|sudo|-*)]}
# 	      echo -n "\ek$CMD\e\\"
#     fi
# }
# 
# 
# setprompt () {
#     ###
#     # Need this so the prompt will work.
# 
#     setopt prompt_subst
#     # See if we can use colors.
# 
#     autoload colors zsh/terminfo
#     if [[ "$terminfo[colors]" -ge 8 ]]; then
# 	      colors
#     fi
#     for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
# 	      eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
# 	      eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
# 	      (( count = $count + 1 ))
#     done
#     PR_NO_COLOUR="%{$terminfo[sgr0]%}"
# 
# 
#     ###
#     # See if we can use extended characters to look nicer.
#     
#     typeset -A altchar
#     set -A altchar ${(s..)terminfo[acsc]}
#     PR_SET_CHARSET="%{$terminfo[enacs]%}"
#     PR_SHIFT_IN="%{$terminfo[smacs]%}"
#     PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
#     PR_HBAR=${altchar[q]:--}
#     PR_ULCORNER=${altchar[l]:--}
#     PR_LLCORNER=${altchar[m]:--}
#     PR_LRCORNER=${altchar[j]:--}
#     PR_URCORNER=${altchar[k]:--}
# 
#     
#     ###
#     # Decide if we need to set titlebar text.
#     
#     case $TERM in
# 	      xterm*)
# 	          PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
# 	          ;;
# 	      screen)
# 	          PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
# 	          ;;
# 	      *)
# 	          PR_TITLEBAR=''
# 	          ;;
#     esac
#     
#     
#     ###
#     # Decide whether to set a screen title
#     if [[ "$TERM" == "screen" ]]; then
# 	      PR_STITLE=$'%{\ekzsh\e\\%}'
#     else
# 	      PR_STITLE=''
#     fi
#     
#     
#     ###
#     # APM detection
#     
#     if which ibam > /dev/null; then
# 	      PR_APM='$PR_RED${${PR_APM_RESULT[(f)1]}[(w)-2]}%%(${${PR_APM_RESULT[(f)3]}[(w)-1]})$PR_LIGHT_BLUE:'
#     elif which apm > /dev/null; then
# 	      PR_APM='$PR_RED${PR_APM_RESULT[(w)5,(w)6]/\% /%%}$PR_LIGHT_BLUE:'
#     else
# 	      PR_APM=''
#     fi
#     
#     
#     ###
#     # Finally, the prompt.
# 
#      PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
# $PR_CYAN$PR_SHIFT_IN$PR_ULCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
# $PR_GREEN%(!.%SROOT%s.%n)$PR_GREEN@%m:%l\
# $PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_HBAR${(e)PR_FILLBAR}$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
# $PR_MAGENTA%$PR_PWDLEN<...<%~%<<\
# $PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_URCORNER$PR_SHIFT_OUT\
# 
# $PR_CYAN$PR_SHIFT_IN$PR_LLCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
# %(?..$PR_LIGHT_RED%?$PR_BLUE:)\
# ${(e)PR_APM}$PR_YELLOW%D{%H:%M}\
# $PR_LIGHT_BLUE:%(!.$PR_RED.$PR_WHITE)%#$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
# $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
# $PR_NO_COLOUR '
#  
# 
#     RPROMPT=' $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
# ($PR_YELLOW%D{%a,%b%d}$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'
# 
#     PS2='$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
# $PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
# $PR_LIGHT_GREEN%_$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
# $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '
# }
# 
# setprompt


[[ -s "$HOME/.tmuxifier/init.sh" ]] && source "$HOME/.tmuxifier/init.sh"

